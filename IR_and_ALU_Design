`timescale 1ns/1ps

`define op_code IR[31:27]
`define rdst    IR [26:22]
`define rsrc1   IR [21:17]
`define imm_mod IR [16]
`define rsrc2   IR [15:11]
`define isrc    IR [15:0]

`define movsgpr 5'b00000
`define mov     5'b00001
`define add     5'b00010
`define sub     5'b00011
`define mul     5'b00100


module IR_ALU();
  
  reg [31:0]IR;
  reg [15:0]sgpr;
  reg [15:0] GPR[31:0];
  reg [31:0]mul_temp;

  always @ (*)
    begin
      case(`op_code)
        
        `movsgpr: begin
          GPR[`rdst] = sgpr;
        end
        
        `mov : begin
          if(`imm_mod)
            GPR[`rdst]  = `isrc;
          else
            GPR[`rdst]   = GPR[`rsrc1];
        end
        
        `add    : begin
          if(`imm_mod)
            GPR[`rdst] = GPR[`rsrc1] + `isrc;
          else
            GPR[`rdst] = GPR[`rsrc1] + GPR[`rsrc2];
        end
        
        `sub    : begin
          if(`imm_mod)
            GPR[`rdst] = GPR[`rsrc1] - `isrc;
          else
            GPR[`rdst] = GPR[`rsrc1] - GPR[`rsrc2];
        end
        
         `mul    : begin
           if(`imm_mod)
             mul_temp   = GPR[`rsrc1] * `isrc;
           else
             mul_temp   = GPR[`rsrc1] * GPR[`rsrc2];
           GPR[`rdst]  = mul_temp[15:0];
           sgpr        = mul_temp[31:16];
        end
        
      endcase
    end
endmodule
