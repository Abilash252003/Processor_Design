module tb();
  reg clk, rst;
  wire [15:0]din;
  wire [15:0]dout;
  
  processor_design dut(.clk(clk), .rst(rst), .din(din), .dout(dout));
  
  integer i;
  
  task GPR_initialize();
    for(i=0; i<32; i=i+1)
      begin
        dut.GPR[i] = 5;
      end
  endtask
  
  task display_gpr();
    for(i=0; i<32; i=i+1)
      begin
        $display("GPR[%d]: %d", i,dut.GPR[i]);
      end
  endtask
  
  task data_mem_initialize();
    for(i=0; i<65536; i=i+1)
      begin
        dut.data_mem[i] = 10;
      end
  endtask
  
  task display_data_mem();
    for(i=0; i<16; i=i+1)
      begin
        $display("data_mem[%d]: %d", i,dut.data_mem[i]);
      end
  endtask
  
  task insta_mem_data();
    dut.inst_mem[65531] = 32'b 00001_00111_00000_1_00000_00111111111; //jp
    
    dut.inst_mem[0] = 32'b 00001_00000_00000_1_00000_00000011111;
    dut.inst_mem[1] = 32'b 00001_00001_00000_1_00000_00000000110;
    dut.inst_mem[2] = 32'b 00001_00010_00000_1_00000_00000000000;
    dut.inst_mem[3] = 32'b 00001_00011_00000_1_00000_00000000111;
    dut.inst_mem[4] = 32'b 00010_00101_00110_1_11111_11111111011;  //c
    dut.inst_mem[5] = 32'b 10011_00000_00000_1_11111_11111111011;  //jc
    
    dut.inst_mem[65532] = 32'b 00010_00100_00011_1_00000_00000000001; //inc
    dut.inst_mem[65533] = 32'b 11011_00000_00000_0_00000_00000000000; //last instruction
    
  endtask
  
  task display_insta_mem();
    for(i=0; i<5; i=i+1)
      begin
        $display("inst_mem[%d]: %h", i,dut.inst_mem[i]);
      end
  endtask
    
  initial
    begin
      clk = 1;
      forever #5 clk = ~clk;
    end
  
  initial 
    begin
      $dumpfile("dump.vcd");
      $dumpvars;
    end

  initial
    begin
      GPR_initialize();
      display_gpr();
      data_mem_initialize();
      display_data_mem();
      insta_mem_data();
      display_insta_mem();
      
      rst = 1'b1;
      #10;
      rst = 1'b0;
      #500;
     
      display_gpr();
      display_data_mem();
      $finish;
    end
  
endmodule
